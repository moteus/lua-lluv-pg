io.stdout:setvbuf'no';io.stderr:setvbuf'no';
package.path = "..\\src\\?.lua;" .. package.path

local prequire = function(m)
  local ok, m = pcall(require, m)
  if ok then return m end
end

-- seems Lua struct has problem with Lua 5.3
local struct = prequire "struct"
local bin    = require  "lluv.pg.utils.bin"

if struct then describe("test struct", function()
  local function check_unpack(fmt, int)
    local s = struct.pack(fmt, int)
    local a = struct.unpack(fmt, s)
    local b = bin.unpack(fmt, s)
    return a, b
  end

  local function check_pack(fmt, int)
    local a = struct.pack(fmt, int)
    local b = bin.pack(fmt, int)
    return a, b
  end

  local function build_unpack_int_test(fmt, max, step) return function()
    for i = 0, max, step do
      local a, b = check_unpack(fmt, i)
      assert.equal(a, b)
    end
  end end

  local function build_pack_int_test(fmt, max, step) return function()
    for i = 0, max, step do
      local a, b = check_pack(fmt, i)
      assert.equal(a, b)
    end
  end end

  it('should unpack zerostring', function()
    local a, b = check_unpack('s', 'hello')
    assert.equal(a, b)
  end)

  it('should unpack chars', function()
    local a, b = check_unpack('c2', 'hello')
    assert.equal(a, b)
  end)

  it('should unpack uint8',                build_unpack_int_test('B',    0xFF,        1))
  it('should unpack int8',                 build_unpack_int_test('b',    0xFF,        1))
  it('should unpack int8',                 build_unpack_int_test('b',   -0xFF,       -1))
  it('should unpack uint16 big endian',    build_unpack_int_test('>I2',  0xFFFF,      0xFF))
  it('should unpack int16 big endian',     build_unpack_int_test('>i2',  0xFFFF,      0xFF))
  it('should unpack int16 big endian',     build_unpack_int_test('>i2', -0xFFFF,     -0xFF))
  it('should unpack uint16 little endian', build_unpack_int_test('<I2',  0xFFFF,      0xFF))
  it('should unpack int16 little endian',  build_unpack_int_test('<i2',  0xFFFF,      0xFF))
  it('should unpack int16 little endian',  build_unpack_int_test('<i2', -0xFFFF,     -0xFF))
  it('should unpack uint32 big endian',    build_unpack_int_test('>I4',  0xFFFFFFFF,  0xFFFF))
  it('should unpack int32 big endian',     build_unpack_int_test('>i4',  0xFFFFFFFF,  0xFFFF))
  it('should unpack int32 big endian',     build_unpack_int_test('>i4', -0xFFFFFFFF, -0xFFFF))
  it('should unpack uint32 little endian', build_unpack_int_test('<I4',  0xFFFFFFFF,  0xFFFF))
  it('should unpack int32 little endian',  build_unpack_int_test('<i4',  0xFFFFFFFF,  0xFFFF))
  it('should unpack int32 little endian',  build_unpack_int_test('<i4', -0xFFFFFFFF, -0xFFFF))

  it('should pack uint8',                  build_pack_int_test('B',      0xFF,        1))
  it('should pack int8',                   build_pack_int_test('b',      0xFF,        1))
  it('should pack int8',                   build_pack_int_test('b',     -0xFF,       -1))
  it('should pack uint16 big endian',      build_pack_int_test('>I2',    0xFFFF,      0xFF))
  it('should pack int16 big endian',       build_pack_int_test('>i2',    0xFFFF,      0xFF))
  it('should pack int16 big endian',       build_pack_int_test('>i2',   -0xFFFF,     -0xFF))
  it('should pack uint16 little endian',   build_pack_int_test('<I2',    0xFFFF,      0xFF))
  it('should pack int16 little endian',    build_pack_int_test('<i2',    0xFFFF,      0xFF))
  it('should pack int16 little endian',    build_pack_int_test('<i2',   -0xFFFF,     -0xFF))
  it('should pack uint32 big endian',      build_pack_int_test('>I4',    0xFFFFFFFF,  0xFFFF))
  it('should pack int32 big endian',       build_pack_int_test('>i4',    0xFFFFFFFF,  0xFFFF))
  it('should pack int32 big endian',       build_pack_int_test('>i4',   -0xFFFFFFFF, -0xFFFF))
  it('should pack uint32 little endian',   build_pack_int_test('<I4',    0xFFFFFFFF,  0xFFFF))
  it('should pack int32 little endian',    build_pack_int_test('<i4',    0xFFFFFFFF,  0xFFFF))
  it('should pack int32 little endian',    build_pack_int_test('<i4',   -0xFFFFFFFF, -0xFFFF))

  it('should pack zerostring', function()
    local a, b = check_pack('s', 'hello')
    assert.equal(a, b)
  end)

  it('should pack chars', function()
    local a, b = check_pack('c2', 'hello')
    assert.equal(a, b)
  end)

  it('should unpack complex pattern', function()
    local fmt = '>sc1I2i4<i2B'
    local s = struct.pack(fmt,
      'hello', 'a', 0xAABB, -15, -25, 241
    )
    local a, b, c, d, e, f, pos = bin.unpack(fmt, s)
    assert.equal('hello', a)
    assert.equal('a',     b)
    assert.equal(0xAABB,  c)
    assert.equal(-15,     d)
    assert.equal(-25,     e)
    assert.equal(241,     f)
    assert.equal(#s + 1,pos)
  end)

  it('should pack complex pattern', function()
    local fmt = '>sc1I2i4<i2B'
    local s = bin.pack(fmt,
      'hello', 'a', 0xAABB, -15, -25, 241
    )
    local a, b, c, d, e, f, pos = struct.unpack(fmt, s)
    assert.equal('hello', a)
    assert.equal('a',     b)
    assert.equal(0xAABB,  c)
    assert.equal(-15,     d)
    assert.equal(-25,     e)
    assert.equal(241,     f)
    assert.equal(#s + 1,pos)
  end)

end) end